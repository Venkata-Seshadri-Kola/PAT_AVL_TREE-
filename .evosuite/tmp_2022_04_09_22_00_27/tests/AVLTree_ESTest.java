/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 10 03:02:26 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(821);
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      int int0 = 1352;
      aVLTree0.delete(1352);
      aVLTree0.delete(1);
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(821);
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node1.key = 31;
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      int int1 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.delete(int1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1));
      aVLTree0.delete((-1));
      aVLTree0.delete(184);
      aVLTree0.insert((-2466));
      aVLTree0.insert((-223));
      aVLTree0.delete((-1));
      aVLTree0.delete((-1));
      aVLTree0.insert((-2809));
      aVLTree0.insert((-2165));
      aVLTree0.find((-1));
      aVLTree0.find((-1));
      aVLTree0.find((-2809));
      aVLTree0.delete((-3348));
      aVLTree0.find((-1));
      aVLTree0.insert(2382);
      aVLTree0.delete((-2809));
      aVLTree0.find((-223));
      aVLTree0.find((-1356));
      aVLTree0.find((-3348));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1991);
      aVLTree0.insert((-1));
      aVLTree0.delete(1991);
      aVLTree0.delete(1991);
      aVLTree0.delete(1991);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.key = (-789);
      int int0 = 0;
      aVLTree0.delete(0);
      aVLTree_Node0.height = (-1);
      aVLTree0.insert((-1));
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1690);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-178));
      aVLTree0.insert(1);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.insert(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNull(aVLTree_Node0);
      
      aVLTree0.insert((-1));
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(821);
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete(1352);
      aVLTree0.delete(1);
      aVLTree0.delete(1352);
      aVLTree0.delete((-1357));
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree_Node0.right = null;
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.right;
      aVLTree0.getBalance((AVLTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.insert((-1034));
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1959));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(0);
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.delete(2074);
      aVLTree0.delete(2074);
      aVLTree_Node1.height = 0;
      aVLTree_Node1.left = aVLTree_Node0.left;
      aVLTree0.delete(1);
      aVLTree_Node0.left.height = 2074;
      aVLTree0.delete(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(0);
      int int0 = (-1056);
      aVLTree0.insert(int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(821);
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete(1352);
      aVLTree0.delete(1);
      aVLTree0.delete(1352);
      aVLTree0.delete((-1));
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      aVLTree_Node0.right = aVLTree_Node0;
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree_Node1.left = aVLTree_Node0.right;
      aVLTree0.getBalance(aVLTree_Node1);
      // Undeclared exception!
      aVLTree0.find(2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(1704);
      aVLTree0.insert(2141);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1704);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 1;
      aVLTree0.insert(1597);
      aVLTree0.insert(26);
      aVLTree0.insert(1);
      aVLTree0.find(1);
      aVLTree0.find(1);
      // Undeclared exception!
      try { 
        aVLTree0.insert(1597);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(67);
      aVLTree0.find(1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1959));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(0);
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.delete(2074);
      aVLTree0.delete(2074);
      aVLTree_Node1.left = aVLTree_Node0.left;
      aVLTree_Node1.right = aVLTree_Node0.left;
      aVLTree0.delete(2074);
      aVLTree_Node0.left.height = 2074;
      aVLTree0.delete(0);
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(1704);
      aVLTree0.insert(742);
      aVLTree0.delete(742);
      aVLTree0.getRoot();
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.getBalance((AVLTree.Node) null);
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-948));
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1069));
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(91);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1065));
      aVLTree0.insert((-1));
      aVLTree0.insert((-1056));
      aVLTree0.insert(3216);
      aVLTree0.delete((-1065));
      aVLTree0.find((-1));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(821);
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete(1352);
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.find(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2454));
      aVLTree0.insert((-2789));
      aVLTree0.insert((-3862));
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.insert((-3862));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }
}
